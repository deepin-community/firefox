From f2076ea1b9fc0c5bce4dfc35b2b48fa2bdf0d6c0 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Fri, 21 Feb 2025 06:50:16 +0000
Subject: [PATCH 6/9] BACKPORT: Bug 1894818 - part5 : append SEI and ensure the
 NALUs are appended in the order of nalu's type.
 r=media-playback-reviewers,padenot

The FFmpeg HEVC decoder requires NAL units to be appended in the correct order
based on their NALU type. Failure to do so results in errors and playback
failure.

Differential Revision: https://phabricator.services.mozilla.com/D238157
---
 .../platforms/agnostic/bytestreams/H265.cpp   | 19 ++---------
 .../platforms/agnostic/bytestreams/H265.h     |  5 ++-
 .../bytestreams/gtest/TestByteStreams.cpp     |  7 ++--
 .../platforms/wrappers/MediaChangeMonitor.cpp | 32 +++++++++++++------
 4 files changed, 32 insertions(+), 31 deletions(-)

diff --git a/dom/media/platforms/agnostic/bytestreams/H265.cpp b/dom/media/platforms/agnostic/bytestreams/H265.cpp
index 84c3daf5da..4b7ba0897b 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.cpp
+++ b/dom/media/platforms/agnostic/bytestreams/H265.cpp
@@ -1439,20 +1439,7 @@ already_AddRefed<mozilla::MediaByteBuffer> H265::CreateFakeExtraData() {
 
 /* static */
 already_AddRefed<mozilla::MediaByteBuffer> H265::CreateNewExtraData(
-    const HVCCConfig& aConfig, const Maybe<H265NALU>& aSPS,
-    const Maybe<H265NALU>& aPPS, const Maybe<H265NALU>& aVPS) {
-  // Append essential NALUs if they exist
-  nsTArray<H265NALU> nalus;
-  if (aSPS) {
-    nalus.AppendElement(*aSPS);
-  }
-  if (aPPS) {
-    nalus.AppendElement(*aPPS);
-  }
-  if (aVPS) {
-    nalus.AppendElement(*aVPS);
-  }
-
+    const HVCCConfig& aConfig, const nsTArray<H265NALU>& aNALUs) {
   // HEVCDecoderConfigurationRecord (HVCC) is in ISO/IEC 14496-15 8.3.2.1.2
   auto extradata = MakeRefPtr<mozilla::MediaByteBuffer>();
   BitWriter writer(extradata);
@@ -1478,8 +1465,8 @@ already_AddRefed<mozilla::MediaByteBuffer> H265::CreateNewExtraData(
   writer.WriteBits(aConfig.numTemporalLayers, 3);
   writer.WriteBits(aConfig.temporalIdNested, 1);
   writer.WriteBits(aConfig.lengthSizeMinusOne, 2);
-  writer.WriteU8(nalus.Length());  // numOfArrays
-  for (auto& nalu : nalus) {
+  writer.WriteU8(aNALUs.Length());  // numOfArrays
+  for (auto& nalu : aNALUs) {
     writer.WriteBits(0, 2);                     // array_completeness + reserved
     writer.WriteBits(nalu.mNalUnitType, 6);     // NAL_unit_type
     writer.WriteBits(1, 16);                    // numNalus
diff --git a/dom/media/platforms/agnostic/bytestreams/H265.h b/dom/media/platforms/agnostic/bytestreams/H265.h
index 915a6d8a54..5f86ea738c 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.h
+++ b/dom/media/platforms/agnostic/bytestreams/H265.h
@@ -395,10 +395,9 @@ class H265 final {
 
   // Create new extradata with the essential information from the given
   // HVCCConfig, excluding its original NALUs. The NALUs will be replaced by the
-  // provided SPS, PPS, and VPS.
+  // given NALUS, which are usually SPS, PPS, VPS and SEI.
   static already_AddRefed<mozilla::MediaByteBuffer> CreateNewExtraData(
-      const HVCCConfig& aConfig, const Maybe<H265NALU>& aSPS,
-      const Maybe<H265NALU>& aPPS, const Maybe<H265NALU>& aVPS);
+      const HVCCConfig& aConfig, const nsTArray<H265NALU>& aNALUs);
 
  private:
   // Return RAW BYTE SEQUENCE PAYLOAD (rbsp) from NAL content.
diff --git a/dom/media/platforms/agnostic/bytestreams/gtest/TestByteStreams.cpp b/dom/media/platforms/agnostic/bytestreams/gtest/TestByteStreams.cpp
index 1ea93e09d7..a5ba7ad4bb 100644
--- a/dom/media/platforms/agnostic/bytestreams/gtest/TestByteStreams.cpp
+++ b/dom/media/platforms/agnostic/bytestreams/gtest/TestByteStreams.cpp
@@ -817,8 +817,11 @@ TEST(H265, SPSIteratorAndCreateNewExtraData)
   EXPECT_TRUE(ppsMaybe);
   auto vpsMaybe = hvcc.GetFirstAvaiableNALU(H265NALU::NAL_TYPES::VPS_NUT);
   EXPECT_TRUE(vpsMaybe);
-  RefPtr<MediaByteBuffer> newExtradata =
-      H265::CreateNewExtraData(hvcc, spsMaybe, ppsMaybe, vpsMaybe);
+  nsTArray<H265NALU> nalus;
+  nalus.AppendElement(*spsMaybe);
+  nalus.AppendElement(*ppsMaybe);
+  nalus.AppendElement(*vpsMaybe);
+  RefPtr<MediaByteBuffer> newExtradata = H265::CreateNewExtraData(hvcc, nalus);
   EXPECT_TRUE(newExtradata);
 
   // The new extradata should match the original extradata.
diff --git a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
index 3bcf31c083..8265bd2655 100644
--- a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
+++ b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
@@ -338,6 +338,11 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
       mVPS.Clear();
       mVPS.AppendElements(nalu->mNALU);
     }
+    if (auto nalu =
+            hvcc.GetFirstAvaiableNALU(H265NALU::NAL_TYPES::PREFIX_SEI_NUT)) {
+      mSEI.Clear();
+      mSEI.AppendElements(nalu->mNALU);
+    }
 
     // Construct a new extradata. A situation we encountered previously involved
     // the initial extradata containing all required NALUs, while the inband
@@ -347,17 +352,23 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
     // should update only the differing NALUs, ensuring all essential
     // information remains in the extradata.
     MOZ_ASSERT(!mSPS.IsEmpty());  // SPS is something MUST to have
-    Maybe<H265NALU> sps = Some(H265NALU(mSPS.Elements(), mSPS.Length()));
-    Maybe<H265NALU> pps = !mPPS.IsEmpty()
-                              ? Some(H265NALU(mPPS.Elements(), mPPS.Length()))
-                              : Nothing();
-    Maybe<H265NALU> vps = !mVPS.IsEmpty()
-                              ? Some(H265NALU(mVPS.Elements(), mVPS.Length()))
-                              : Nothing();
-    mCurrentConfig.mExtraData = H265::CreateNewExtraData(hvcc, sps, pps, vps);
+    nsTArray<H265NALU> nalus;
+    // Append NALU by the order of NALU type. If we don't do so, it would cause
+    // an error on the FFmpeg decoder on Linux.
+    if (!mVPS.IsEmpty()) {
+      nalus.AppendElement(H265NALU(mVPS.Elements(), mVPS.Length()));
+    }
+    nalus.AppendElement(H265NALU(mSPS.Elements(), mSPS.Length()));
+    if (!mPPS.IsEmpty()) {
+      nalus.AppendElement(H265NALU(mPPS.Elements(), mPPS.Length()));
+    }
+    if (!mSEI.IsEmpty()) {
+      nalus.AppendElement(H265NALU(mSEI.Elements(), mSEI.Length()));
+    }
+    mCurrentConfig.mExtraData = H265::CreateNewExtraData(hvcc, nalus);
     mTrackInfo = new TrackInfoSharedPtr(mCurrentConfig, mStreamID++);
-    LOG("Updated extradata, hasSPS=%d, hasPPS=%d, hasVPS=%d", !!sps, !!pps,
-        !!vps);
+    LOG("Updated extradata, hasSPS=%d, hasPPS=%d, hasVPS=%d, hasSEI=%d",
+        !mSPS.IsEmpty(), !mPPS.IsEmpty(), !mVPS.IsEmpty(), !mSEI.IsEmpty());
   }
 
   VideoInfo mCurrentConfig;
@@ -366,6 +377,7 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
   nsTArray<uint8_t> mSPS;
   nsTArray<uint8_t> mPPS;
   nsTArray<uint8_t> mVPS;
+  nsTArray<uint8_t> mSEI;
 
   uint32_t mStreamID = 0;
   RefPtr<TrackInfoSharedPtr> mTrackInfo;
-- 
2.48.1

