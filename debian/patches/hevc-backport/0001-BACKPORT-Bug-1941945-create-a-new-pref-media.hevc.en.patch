From b2c6d2b20d3d56f8d6485a156e106c7c5adc03e9 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Thu, 6 Feb 2025 21:38:27 +0000
Subject: [PATCH 1/9] BACKPORT: Bug 1941945 - create a new pref
 `media.hevc.enabled` to replace old pref and remove unnecessary checks and
 tests. r=media-playback-reviewers,padenot

We'd like to have a general pref to control hevc on all platforms, not
just on Windows.

Differential Revision: https://phabricator.services.mozilla.com/D236981
---
 dom/media/ipc/MFCDMParent.cpp                 |  4 +-
 dom/media/ipc/RemoteDecoderManagerChild.cpp   |  8 ++--
 .../mediacapabilities/MediaCapabilities.cpp   | 16 --------
 .../mediasource/test/mochitest_compat.toml    |  2 +-
 dom/media/mp4/MP4Decoder.cpp                  | 19 +---------
 .../wmf/MFMediaEngineDecoderModule.cpp        |  2 +-
 dom/media/platforms/wmf/WMFDecoderModule.cpp  |  2 +-
 dom/media/test/crashtests/crashtests.list     |  6 +--
 dom/media/test/mochitest_compat.toml          |  2 +-
 dom/media/test/test_hevc_support.html         | 38 -------------------
 gfx/ipc/GPUChild.cpp                          |  2 +-
 gfx/ipc/GPUParent.cpp                         |  2 +-
 modules/libpref/init/StaticPrefList.yaml      | 21 ++++++----
 .../UserCharacteristicsPageService.sys.mjs    |  2 +-
 14 files changed, 31 insertions(+), 95 deletions(-)

diff --git a/dom/media/ipc/MFCDMParent.cpp b/dom/media/ipc/MFCDMParent.cpp
index 42d4d48efb..2bf96acb03 100644
--- a/dom/media/ipc/MFCDMParent.cpp
+++ b/dom/media/ipc/MFCDMParent.cpp
@@ -862,7 +862,7 @@ void MFCDMParent::GetCapabilities(const nsString& aKeySystem,
   if (aFlags.contains(CapabilitesFlag::NeedClearLeadCheck)) {
     for (const auto& codec : kVideoCodecs) {
       if (codec == KeySystemConfig::EME_CODEC_HEVC &&
-          !StaticPrefs::media_wmf_hevc_enabled()) {
+          !StaticPrefs::media_hevc_enabled()) {
         continue;
       }
       CryptoSchemeSet supportedScheme;
@@ -927,7 +927,7 @@ void MFCDMParent::GetCapabilities(const nsString& aKeySystem,
     // Non clearlead situation for video codecs
     for (const auto& codec : kVideoCodecs) {
       if (codec == KeySystemConfig::EME_CODEC_HEVC &&
-          !StaticPrefs::media_wmf_hevc_enabled()) {
+          !StaticPrefs::media_hevc_enabled()) {
         continue;
       }
       if (FactorySupports(factory, aKeySystem, convertCodecToFourCC(codec),
diff --git a/dom/media/ipc/RemoteDecoderManagerChild.cpp b/dom/media/ipc/RemoteDecoderManagerChild.cpp
index 6d51f954ee..add1695fac 100644
--- a/dom/media/ipc/RemoteDecoderManagerChild.cpp
+++ b/dom/media/ipc/RemoteDecoderManagerChild.cpp
@@ -272,16 +272,16 @@ bool RemoteDecoderManagerChild::Supports(
       // process. As HEVC support is still a experimental feature, we don't want
       // to report support for it arbitrarily.
       if (MP4Decoder::IsHEVC(aParams.mConfig.mMimeType)) {
-#if defined(XP_WIN)
-        if (!StaticPrefs::media_wmf_hevc_enabled()) {
+        if (!StaticPrefs::media_hevc_enabled()) {
           return false;
         }
+#if defined(XP_WIN)
         return aLocation == RemoteDecodeIn::UtilityProcess_MFMediaEngineCDM ||
                aLocation == RemoteDecodeIn::GpuProcess;
-#elif defined(MOZ_APPLEMEDIA)
+#elif defined(MOZ_APPLEMEDIA) || defined(MOZ_WIDGET_ANDROID)
         return trackSupport.contains(TrackSupport::Video);
 #else
-        // TODO : still need to add support on Android and Linux.
+        // TODO : not support on Linux yet
         return false;
 #endif
       }
diff --git a/dom/media/mediacapabilities/MediaCapabilities.cpp b/dom/media/mediacapabilities/MediaCapabilities.cpp
index e9d3cd99f2..8a80f6cbfb 100644
--- a/dom/media/mediacapabilities/MediaCapabilities.cpp
+++ b/dom/media/mediacapabilities/MediaCapabilities.cpp
@@ -422,22 +422,6 @@ void MediaCapabilities::CreateMediaCapabilitiesDecodingInfo(
       continue;
     }
 
-// Early return for non-encrypted HEVC if the pref is off.
-#ifdef MOZ_WMF
-    if (MP4Decoder::IsHEVC(config->mMimeType) &&
-        StaticPrefs::media_wmf_hevc_enabled() != 1) {
-      MediaCapabilitiesDecodingInfo info;
-      info.mSupported = false;
-      info.mSmooth = false;
-      info.mPowerEfficient = false;
-      LOG("Pref is disabled : %s -> %s",
-          MediaDecodingConfigurationToStr(aConfiguration).get(),
-          MediaCapabilitiesInfoToStr(info).get());
-      aPromise->MaybeResolve(std::move(info));
-      return;
-    }
-#endif
-
     // On Windows, the MediaDataDecoder expects to be created on a thread
     // supporting MTA, which the main thread doesn't. So we use our task queue
     // to create such decoder and perform initialization.
diff --git a/dom/media/mediasource/test/mochitest_compat.toml b/dom/media/mediasource/test/mochitest_compat.toml
index 21b33069d4..797bd3b163 100644
--- a/dom/media/mediasource/test/mochitest_compat.toml
+++ b/dom/media/mediasource/test/mochitest_compat.toml
@@ -1,7 +1,7 @@
 [DEFAULT]
 subsuite = "media"
 tags = "media-engine-compatible media-gpu"
-prefs = ["media.wmf.hevc.enabled=1"] # for test_MediaSource_hevc_mp4
+prefs = ["media.hevc.enabled=1"] # for test_MediaSource_hevc_mp4
 support-files = [
   "mediasource.js",
   "seek.webm",
diff --git a/dom/media/mp4/MP4Decoder.cpp b/dom/media/mp4/MP4Decoder.cpp
index bd1de4e4a1..9fce45c08f 100644
--- a/dom/media/mp4/MP4Decoder.cpp
+++ b/dom/media/mp4/MP4Decoder.cpp
@@ -124,20 +124,13 @@ nsTArray<UniquePtr<TrackInfo>> MP4Decoder::GetTracksInfo(
       continue;
     }
 #endif
-// TODO : remove the WMF pref check after removing the hevc pref in bug 1941945.
-#if defined(MOZ_APPLEMEDIA) || defined(MOZ_WMF)
-#  ifdef MOZ_WMF
-    if (StaticPrefs::media_wmf_hevc_enabled() && IsH265CodecString(codec)) {
-#  else
-    if (IsH265CodecString(codec)) {
-#  endif
+    if (StaticPrefs::media_hevc_enabled() && IsH265CodecString(codec)) {
       auto trackInfo =
           CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters(
               "video/hevc"_ns, aType);
       tracks.AppendElement(std::move(trackInfo));
       continue;
     }
-#endif
     if (isVideo && IsWhitelistedH264Codec(codec)) {
       auto trackInfo =
           CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters(
@@ -204,19 +197,11 @@ bool MP4Decoder::IsSupportedType(const MediaContainerType& aType,
           CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters(
               "video/av1"_ns, aType));
     }
-// TODO : merge hevc codes after removing the hevc pref in bug 1941945.
-#ifdef MOZ_WMF
-    if (StaticPrefs::media_wmf_hevc_enabled()) {
+    if (StaticPrefs::media_hevc_enabled()) {
       tracks.AppendElement(
           CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters(
               "video/hevc"_ns, aType));
     }
-#endif
-#ifdef MOZ_APPLEMEDIA
-    tracks.AppendElement(
-        CreateTrackInfoWithMIMETypeAndContainerTypeExtraParameters(
-            "video/hevc"_ns, aType));
-#endif
   }
 
   // Check that something is supported at least.
diff --git a/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp b/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
index e291ab6a54..ee17e058a9 100644
--- a/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
+++ b/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
@@ -162,7 +162,7 @@ static bool CreateMFTDecoderOnMTA(const WMFStreamType& aType) {
       break;
 #endif
     case WMFStreamType::HEVC:
-      if (StaticPrefs::media_wmf_hevc_enabled()) {
+      if (StaticPrefs::media_hevc_enabled()) {
         result =
             SUCCEEDED(decoder->Create(MFT_CATEGORY_VIDEO_DECODER,
                                       MFVideoFormat_HEVC, MFVideoFormat_NV12));
diff --git a/dom/media/platforms/wmf/WMFDecoderModule.cpp b/dom/media/platforms/wmf/WMFDecoderModule.cpp
index b61e1862b5..6e2ac974f6 100644
--- a/dom/media/platforms/wmf/WMFDecoderModule.cpp
+++ b/dom/media/platforms/wmf/WMFDecoderModule.cpp
@@ -482,7 +482,7 @@ media::DecodeSupportSet WMFDecoderModule::SupportsMimeType(
 
 /* static */
 bool WMFDecoderModule::IsHEVCSupported() {
-  return sForceEnableHEVC || StaticPrefs::media_wmf_hevc_enabled() == 1;
+  return sForceEnableHEVC || StaticPrefs::media_hevc_enabled();
 }
 
 /* static */
diff --git a/dom/media/test/crashtests/crashtests.list b/dom/media/test/crashtests/crashtests.list
index e349de5717..f2718e8e98 100644
--- a/dom/media/test/crashtests/crashtests.list
+++ b/dom/media/test/crashtests/crashtests.list
@@ -173,9 +173,9 @@ load 1835118.adts
 load trimming_needed_and_last_sample_invalid_duration.ogg
 load 1839193.html
 load 1850453.html
-test-pref(media.wmf.hevc.enabled,1) load 1859384.mp4
-test-pref(media.wmf.hevc.enabled,1) load 1859600.mp4
-test-pref(media.wmf.hevc.enabled,1) load 1860840.mp4
+test-pref(media.hevc.enabled,true) load 1859384.mp4
+test-pref(media.hevc.enabled,true) load 1859600.mp4
+test-pref(media.hevc.enabled,true) load 1860840.mp4
 load 1864450.html
 load 1872787.html
 load small-timebase.html
diff --git a/dom/media/test/mochitest_compat.toml b/dom/media/test/mochitest_compat.toml
index cc1e9ee8ca..7c23e73b32 100644
--- a/dom/media/test/mochitest_compat.toml
+++ b/dom/media/test/mochitest_compat.toml
@@ -31,7 +31,7 @@
 [DEFAULT]
 subsuite = "media"
 tags = "media-engine-compatible media-gpu"
-prefs = ["media.wmf.hevc.enabled=1"] # for test_hevc_playback
+prefs = ["media.hevc.enabled=1"] # for test_hevc_playback
 support-files = [
   "16bit_wave_extrametadata.wav",
   "16bit_wave_extrametadata.wav^headers^",
diff --git a/dom/media/test/test_hevc_support.html b/dom/media/test/test_hevc_support.html
index f2063094a4..5eba8d8ae3 100644
--- a/dom/media/test/test_hevc_support.html
+++ b/dom/media/test/test_hevc_support.html
@@ -49,44 +49,6 @@ add_task(async function testHEVCSupport() {
   }
 });
 
-add_task(async function testHEVCPrefSupportOnWindows() {
-  if (SpecialPowers.Services.appinfo.OS != "WINNT") {
-    ok(true, "No need to run this task");
-    return;
-  }
-
-  // Enable HEVC for normal playback and media engine playback
-  await SpecialPowers.pushPrefEnv({
-    set: [
-      ["media.wmf.hevc.enabled", 1],
-    ],
-  });
-  let capability = await navigator.mediaCapabilities.decodingInfo(videoConfiguration);
-  ok(capability.supported, `HEVC is supported`);
-
-  // Enable HEVC for only media engine encrypted playback, which makes
-  // non-encrypted HEVC unsupported, but encrypted HEVC is still supported.
-  info(`Turn off HEVC for normal non-encrypted playback`);
-  await SpecialPowers.pushPrefEnv({
-    set: [
-      ["media.wmf.hevc.enabled", 2],
-      ["media.wmf.media-engine.enabled", 2],
-      ["media.eme.playready.enabled", true],
-      ["media.eme.mfcdm.origin-filter.enabled", 0],
-    ],
-  });
-  capability = await navigator.mediaCapabilities.decodingInfo(videoConfiguration);
-  ok(!capability.supported, "Non-encrypted HEVC is not supported");
-
-  info(`Encrypted HEVC should still be supported via the media engine`);
-  const videoEncryptedConfig = {...videoConfiguration};
-  videoEncryptedConfig.keySystemConfiguration = {
-    keySystem: "com.microsoft.playready.recommendation",
-  };
-  capability = await navigator.mediaCapabilities.decodingInfo(videoEncryptedConfig);
-  ok(capability.supported, `Encrypted HEVC is supported`);
-});
-
 </script>
 </head>
 <body>
diff --git a/gfx/ipc/GPUChild.cpp b/gfx/ipc/GPUChild.cpp
index 204f96a339..f09dc72c4d 100644
--- a/gfx/ipc/GPUChild.cpp
+++ b/gfx/ipc/GPUChild.cpp
@@ -386,7 +386,7 @@ mozilla::ipc::IPCResult GPUChild::RecvUpdateMediaCodecsSupported(
   media::MediaCodecsSupported trimedSupported = aSupported;
   if (aSupported.contains(
           mozilla::media::MediaCodecsSupport::HEVCHardwareDecode) &&
-      StaticPrefs::media_wmf_hevc_enabled() != 1) {
+      !StaticPrefs::media_hevc_enabled()) {
     trimedSupported -= mozilla::media::MediaCodecsSupport::HEVCHardwareDecode;
   }
   dom::ContentParent::BroadcastMediaCodecsSupportedUpdate(
diff --git a/gfx/ipc/GPUParent.cpp b/gfx/ipc/GPUParent.cpp
index fd4c50f76f..c06833208e 100644
--- a/gfx/ipc/GPUParent.cpp
+++ b/gfx/ipc/GPUParent.cpp
@@ -115,7 +115,7 @@ static media::MediaCodecsSupported GetFullMediaCodecSupport(
     WMFDecoderModule::Init(WMFDecoderModule::Config::ForceEnableHEVC);
   }
   auto disableHEVCIfNeeded = MakeScopeExit([]() {
-    if (StaticPrefs::media_wmf_hevc_enabled() != 1) {
+    if (!StaticPrefs::media_hevc_enabled()) {
       WMFDecoderModule::DisableForceEnableHEVC();
     }
   });
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
index a9863858f9..7961a33225 100644
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -11464,14 +11464,6 @@
     value: true
     mirror: always
 
-# Enable HEVC support via the windows media foundation
-# 0 : disable, 1 : enable for media engine and MFT,
-# 2 : enable for media engine only
--   name: media.wmf.hevc.enabled
-    type: RelaxedAtomicUint32
-    value: 1
-    mirror: always
-
 # Enable Widevine experiment DRM for EME
 -   name: media.eme.widevine.experiment.enabled
     type: RelaxedAtomicBool
@@ -11491,6 +11483,19 @@
 
 #endif  # MOZ_WMF
 
+- name: media.hevc.enabled
+  type: RelaxedAtomicBool
+#if defined(XP_WIN)
+  value: true
+#elif defined(XP_MACOSX)
+  value: true
+#elif defined(ANDROID)
+  value: true
+#else
+  value: false
+#endif
+  mirror: always
+
 - name: media.decoder-doctor.testing
   type: bool
   value: false
diff --git a/toolkit/components/resistfingerprinting/UserCharacteristicsPageService.sys.mjs b/toolkit/components/resistfingerprinting/UserCharacteristicsPageService.sys.mjs
index d2f9627957..85de51c832 100644
--- a/toolkit/components/resistfingerprinting/UserCharacteristicsPageService.sys.mjs
+++ b/toolkit/components/resistfingerprinting/UserCharacteristicsPageService.sys.mjs
@@ -1025,7 +1025,7 @@ export class UserCharacteristicsPageService {
       "media.ogg.enabled",
       "media.opus.enabled",
       "media.mp4.enabled",
-      "media.wmf.hevc.enabled",
+      "media.hevc.enabled",
       "media.webm.enabled",
       "media.av1.enabled",
       "media.encoder.webm.enabled",
-- 
2.48.1

