From 6c8796c2bbd291a9b775b94cab71a860934001b9 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Fri, 21 Feb 2025 06:50:16 +0000
Subject: [PATCH 7/9] BACKPORT: Bug 1894818 - part6 : properly report the codec
 support for FFmpegDecoderModule. r=stransky

On Linux, we have two decoder modules: ffmpeg and ffvpx, both utilizing ffmpeg.

* ffmpeg uses the system-installed ffmpeg.
* ffvpx is our bundled, trimmed version of ffmpeg.

For proprietary codecs like H.264 and HEVC, hardware decoding is only possible
through the system ffmpeg.

For open codecs like VP8, VP9, and AV1, hardware decoding is supported by both
decoder modules, but ffvpx is always preferred over the system ffmpeg.

Differential Revision: https://phabricator.services.mozilla.com/D238158
---
 .../platforms/ffmpeg/FFmpegDecoderModule.h    | 61 ++++++++++++++++---
 .../platforms/ffmpeg/FFmpegRuntimeLinker.cpp  | 28 +++++++++
 dom/media/platforms/ffmpeg/FFmpegUtils.cpp    | 11 +++-
 modules/libpref/init/StaticPrefList.yaml      |  4 ++
 4 files changed, 94 insertions(+), 10 deletions(-)

diff --git a/dom/media/platforms/ffmpeg/FFmpegDecoderModule.h b/dom/media/platforms/ffmpeg/FFmpegDecoderModule.h
index 66c524f2e3..a619cd5be4 100644
--- a/dom/media/platforms/ffmpeg/FFmpegDecoderModule.h
+++ b/dom/media/platforms/ffmpeg/FFmpegDecoderModule.h
@@ -23,7 +23,8 @@ template <int V>
 class FFmpegDecoderModule : public PlatformDecoderModule {
  public:
   static void Init(FFmpegLibWrapper* aLib) {
-#if defined(XP_WIN) && !defined(MOZ_FFVPX_AUDIOONLY)
+#if defined(MOZ_USE_HWDECODE)
+#  if defined(XP_WIN) && !defined(MOZ_FFVPX_AUDIOONLY)
     if (!XRE_IsGPUProcess()) {
       return;
     }
@@ -51,7 +52,45 @@ class FFmpegDecoderModule : public PlatformDecoderModule {
         }
       }
     }
-#endif
+#  elif MOZ_WIDGET_GTK
+    // Hardware decoding on Linux should only happen on the RDD process for now.
+    if (!XRE_IsRDDProcess()) {
+      return;
+    }
+
+// UseXXXHWDecode are already set in gfxPlatform at the startup.
+#    define ADD_HW_CODEC(codec)                                \
+      if (gfx::gfxVars::Use##codec##HwDecode()) {              \
+        sSupportedHWCodecs.AppendElement(AV_CODEC_ID_##codec); \
+      }
+
+// These proprietary video codecs can only be decoded via hardware by using the
+// system ffmpeg, not supported by ffvpx.
+#    ifndef FFVPX_VERSION
+    ADD_HW_CODEC(H264);
+#      if LIBAVCODEC_VERSION_MAJOR >= 55
+    ADD_HW_CODEC(HEVC);
+#      endif
+#    endif  // !FFVPX_VERSION
+
+// The following open video codecs can be decoded via hardware using ffvpx.
+#    if LIBAVCODEC_VERSION_MAJOR >= 54
+    ADD_HW_CODEC(VP8);
+#    endif
+#    if LIBAVCODEC_VERSION_MAJOR >= 55
+    ADD_HW_CODEC(VP9);
+#    endif
+#    if LIBAVCODEC_VERSION_MAJOR >= 59
+    ADD_HW_CODEC(AV1);
+#    endif
+
+    for (const auto& codec : sSupportedHWCodecs) {
+      MOZ_LOG(sPDMLog, LogLevel::Debug,
+              ("Support %s for hw decoding", AVCodecToString(codec)));
+    }
+#    undef ADD_HW_CODEC
+#  endif  // XP_WIN, MOZ_WIDGET_GTK
+#endif    // MOZ_USE_HWDECODE
   }
 
   static already_AddRefed<PlatformDecoderModule> Create(
@@ -177,11 +216,11 @@ class FFmpegDecoderModule : public PlatformDecoderModule {
               ("FFmpeg decoder rejects as openh264 disabled by pref"));
       return media::DecodeSupportSet{};
     }
-    // TODO : note, currently on Linux, hardware decoding is reported in its own
-    // path (in widget/gtk/GfxInfo.cpp) Make it correct on Linux as well in bug
-    // 1935572.
-    return XRE_IsGPUProcess() ? media::DecodeSupport::HardwareDecode
-                              : media::DecodeSupport::SoftwareDecode;
+    media::DecodeSupportSet support = media::DecodeSupport::SoftwareDecode;
+    if (IsHWDecodingSupported(mimeType)) {
+      support += media::DecodeSupport::HardwareDecode;
+    }
+    return support;
   }
 
  protected:
@@ -196,10 +235,14 @@ class FFmpegDecoderModule : public PlatformDecoderModule {
 
   bool IsHWDecodingSupported(const nsACString& aMimeType) const {
     if (!gfx::gfxVars::IsInitialized() ||
-        !gfx::gfxVars::CanUseHardwareVideoDecoding() ||
-        !StaticPrefs::media_ffvpx_hw_enabled()) {
+        !gfx::gfxVars::CanUseHardwareVideoDecoding()) {
       return false;
     }
+#ifdef FFVPX_VERSION
+    if (!StaticPrefs::media_ffvpx_hw_enabled()) {
+      return false;
+    }
+#endif
     AVCodecID videoCodec = FFmpegVideoDecoder<V>::GetCodecId(aMimeType);
     return sSupportedHWCodecs.Contains(videoCodec);
   }
diff --git a/dom/media/platforms/ffmpeg/FFmpegRuntimeLinker.cpp b/dom/media/platforms/ffmpeg/FFmpegRuntimeLinker.cpp
index 01e7809045..189b063cdb 100644
--- a/dom/media/platforms/ffmpeg/FFmpegRuntimeLinker.cpp
+++ b/dom/media/platforms/ffmpeg/FFmpegRuntimeLinker.cpp
@@ -19,6 +19,7 @@ const char* FFmpegRuntimeLinker::sLinkStatusLibraryName = "";
 template <int V>
 class FFmpegDecoderModule {
  public:
+  static void Init(FFmpegLibWrapper*);
   static already_AddRefed<PlatformDecoderModule> Create(FFmpegLibWrapper*);
 };
 
@@ -90,6 +91,33 @@ bool FFmpegRuntimeLinker::Init() {
         case FFmpegLibWrapper::LinkResult::Success:
           sLinkStatus = LinkStatus_SUCCEEDED;
           sLinkStatusLibraryName = lib;
+          switch (sLibAV.mVersion) {
+            case 53:
+              FFmpegDecoderModule<53>::Init(&sLibAV);
+              break;
+            case 54:
+              FFmpegDecoderModule<54>::Init(&sLibAV);
+              break;
+            case 55:
+            case 56:
+              FFmpegDecoderModule<55>::Init(&sLibAV);
+              break;
+            case 57:
+              FFmpegDecoderModule<57>::Init(&sLibAV);
+              break;
+            case 58:
+              FFmpegDecoderModule<58>::Init(&sLibAV);
+              break;
+            case 59:
+              FFmpegDecoderModule<59>::Init(&sLibAV);
+              break;
+            case 60:
+              FFmpegDecoderModule<60>::Init(&sLibAV);
+              break;
+            case 61:
+              FFmpegDecoderModule<61>::Init(&sLibAV);
+              break;
+          }
           return true;
         case FFmpegLibWrapper::LinkResult::NoProvidedLib:
           MOZ_ASSERT_UNREACHABLE("Incorrectly-setup sLibAV");
diff --git a/dom/media/platforms/ffmpeg/FFmpegUtils.cpp b/dom/media/platforms/ffmpeg/FFmpegUtils.cpp
index 169a0656d2..1762a6d350 100644
--- a/dom/media/platforms/ffmpeg/FFmpegUtils.cpp
+++ b/dom/media/platforms/ffmpeg/FFmpegUtils.cpp
@@ -26,8 +26,17 @@ nsCString MakeErrorString(const FFmpegLibWrapper* aLib, int aErrNum) {
   }
 
 const char* AVCodecToString(const AVCodecID& aCodec) {
-  ENUM_TO_STR(AV_CODEC_ID_AV1);
+  ENUM_TO_STR(AV_CODEC_ID_H264);
+#if LIBAVCODEC_VERSION_MAJOR >= 54
+  ENUM_TO_STR(AV_CODEC_ID_VP8);
+#endif
+#if LIBAVCODEC_VERSION_MAJOR >= 55
   ENUM_TO_STR(AV_CODEC_ID_VP9);
+  ENUM_TO_STR(AV_CODEC_ID_HEVC);
+#endif
+#if LIBAVCODEC_VERSION_MAJOR >= 59
+  ENUM_TO_STR(AV_CODEC_ID_AV1);
+#endif
   return "unknown";
 }
 
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
index 7961a33225..eb18d6b523 100644
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -10960,7 +10960,11 @@
 
 - name: media.ffvpx-hw.enabled
   type: RelaxedAtomicBool
+#if defined(MOZ_WIDGET_GTK)
+  value: true
+#else
   value: false
+#endif
   mirror: always
 
 # The codecs in the vendored ffmpeg copy are usually prefered to the other
-- 
2.48.1

